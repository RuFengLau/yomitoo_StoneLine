{
  "ver": "1.0.27",
  "uuid": "393c57eb-907e-48a6-a804-acfed5e7fd9d",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying lowp vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying mediump vec3 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n    v_uv0.y = a_uv0.y;\n    v_uv0.z = mod(a_uv0.x,10.0);\n    v_uv0.x = (a_uv0.x-v_uv0.z)*0.000001;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision mediump float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying lowp vec4 v_color;\n#if USE_TEXTURE\n  varying mediump vec3 v_uv0;\n  uniform sampler2D texture0;\n  uniform sampler2D texture1;\n  uniform sampler2D texture2;\n  uniform sampler2D texture3;\n  uniform sampler2D texture4;\n  uniform sampler2D texture5;\n  uniform sampler2D texture6;\n  uniform sampler2D texture7;\n#endif\nvec4 ONE = vec4(1.0, 1.0, 1.0, 1.0);\nvec4 HALF = vec4(0.5, 0.5, 0.5, 0.5);\nvec4 ZERO = vec4(0.0, 0.0, 0.0, 0.0);\nvec4 Texture(sampler2D texture,vec2 uv, vec4 o){\n  vec4 texture_tmp = texture2D(texture, uv);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, uv + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n    return o;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    vec4 p0 = vec4(v_uv0.z) - vec4(0.0, 1.0, 2.0, 3.0);\n    vec4 p1 = vec4(v_uv0.z) - vec4(4.0, 5.0, 6.0, 7.0);\n    vec4 w0 = step(p0*p0,HALF);\n    vec4 w1 = step(p1*p1,HALF);\n    vec4 sampledColor = ZERO;\n    if(v_uv0.z < 1.5){\n      sampledColor += w0.x * Texture(texture0, v_uv0.xy*w0.x,o);\n      sampledColor += w0.y * Texture(texture1, v_uv0.xy*w0.y,o);\n    }else if(v_uv0.z < 3.5){\n      sampledColor += w0.z * Texture(texture2, v_uv0.xy*w0.z,o);\n      sampledColor += w0.w * Texture(texture3, v_uv0.xy*w0.w,o);\n    }else if(v_uv0.z < 5.5){\n      sampledColor += w1.x * Texture(texture4, v_uv0.xy*w1.x,o);\n      sampledColor += w1.y * Texture(texture5, v_uv0.xy*w1.y,o);\n    }else{\n      sampledColor += w1.z * Texture(texture6, v_uv0.xy*w1.z,o);\n      sampledColor += w1.w * Texture(texture7, v_uv0.xy*w1.w,o);\n    }\n    o *= sampledColor;\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout lowp vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout mediump vec3 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n    v_uv0.y = a_uv0.y;\n    v_uv0.z = mod(a_uv0.x,10.0);\n    v_uv0.x = (a_uv0.x-v_uv0.z)*0.000001;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision mediump float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin lowp vec4 v_color;\n#if USE_TEXTURE\n  in mediump vec3 v_uv0;\n  uniform sampler2D texture0;\n  uniform sampler2D texture1;\n  uniform sampler2D texture2;\n  uniform sampler2D texture3;\n  uniform sampler2D texture4;\n  uniform sampler2D texture5;\n  uniform sampler2D texture6;\n  uniform sampler2D texture7;\n#endif\nvec4 ONE = vec4(1.0, 1.0, 1.0, 1.0);\nvec4 HALF = vec4(0.5, 0.5, 0.5, 0.5);\nvec4 ZERO = vec4(0.0, 0.0, 0.0, 0.0);\nvec4 Texture(sampler2D texture,vec2 uv, vec4 o){\n  vec4 texture_tmp = texture(texture, uv);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, uv + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n    return o;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    vec4 p0 = vec4(v_uv0.z) - vec4(0.0, 1.0, 2.0, 3.0);\n    vec4 p1 = vec4(v_uv0.z) - vec4(4.0, 5.0, 6.0, 7.0);\n    vec4 w0 = step(p0*p0,HALF);\n    vec4 w1 = step(p1*p1,HALF);\n    vec4 sampledColor = ZERO;\n    if(v_uv0.z < 1.5){\n      sampledColor += w0.x * Texture(texture0, v_uv0.xy*w0.x,o);\n      sampledColor += w0.y * Texture(texture1, v_uv0.xy*w0.y,o);\n    }else if(v_uv0.z < 3.5){\n      sampledColor += w0.z * Texture(texture2, v_uv0.xy*w0.z,o);\n      sampledColor += w0.w * Texture(texture3, v_uv0.xy*w0.w,o);\n    }else if(v_uv0.z < 5.5){\n      sampledColor += w1.x * Texture(texture4, v_uv0.xy*w1.x,o);\n      sampledColor += w1.y * Texture(texture5, v_uv0.xy*w1.y,o);\n    }else{\n      sampledColor += w1.z * Texture(texture6, v_uv0.xy*w1.z,o);\n      sampledColor += w1.w * Texture(texture7, v_uv0.xy*w1.w,o);\n    }\n    o *= sampledColor;\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n}"
      }
    }
  ],
  "subMetas": {}
}